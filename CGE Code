import numpy as np
import pandas as pd
from scipy.optimize import fsolve

class CGEModel:
    """
    A dynamic Computable General Equilibrium (CGE) model to analyze the impact
    of a VAT on private school fees in the UK, for the paper
    'The Stratification Trap: How VAT on School Fees Will Crystallize Britain's Class Divide'.
    """

    def __init__(self, parameters):
        self.p = parameters
        self.quintiles = np.arange(1, 6)
        self.n_quintiles = len(self.quintiles)
        self.n_sectors = 10
        self.time_horizon = 20
        self.gini_coefficient = np.zeros(self.time_horizon + 1)
        self.private_enrollment = np.zeros(self.time_horizon + 1)
        self.enrollment_by_quintile = np.zeros((self.n_quintiles, self.time_horizon + 1))
        self.human_capital = np.zeros((self.n_quintiles, self.time_horizon + 1))
        self.state_school_quality = np.zeros(self.time_horizon + 1)
        self.wage_premium_skilled = np.zeros(self.time_horizon + 1)
        self.income_by_quintile = np.zeros((self.n_quintiles, self.time_horizon + 1))
        self.relative_hc_advantage_q5 = np.zeros(self.time_horizon + 1)

    def _initialize_state(self):
        """Initialize the model state with baseline demographic and economic conditions"""
        self.gini_coefficient[0] = self.p['initial_gini']

        # Calculate initial enrollment distribution based on demographic data
        total_uk_pupils = self.p['initial_private_enrollment'] / 0.07
        total_students_per_quintile = total_uk_pupils / self.n_quintiles
        self.enrollment_by_quintile[:, 0] = self.p['private_enrollment_by_quintile_frac'] * total_students_per_quintile
        self.private_enrollment[0] = np.sum(self.enrollment_by_quintile[:, 0])

        # Initialize human capital distribution based on educational attainment data
        x = 5 / (1 + 1.08 + 1.16 + 1.24 + 1.32)
        self.human_capital[:, 0] = np.array([x, 1.08*x, 1.16*x, 1.24*x, 1.32*x])
        self.human_capital[:, 0] = self.human_capital[:, 0] / np.mean(self.human_capital[:, 0])

        # Initialize institutional parameters
        self.state_school_quality[0] = 1.0
        self.wage_premium_skilled[0] = self.p['skilled_wage_premium']
        self.income_by_quintile[:, 0] = self.p['income_quintile_thresholds_midpoints']

        # Calculate baseline human capital advantage ratio
        self.relative_hc_advantage_q5[0] = self.human_capital[4, 0] / max(1e-6, self.human_capital[2, 0])

    def _calculate_gini(self, income_dist):
        """Calculate Gini coefficient using standard formula"""
        sorted_income = np.sort(np.nan_to_num(income_dist, nan=0.0, posinf=0.0, neginf=0.0))
        sorted_income = np.maximum(sorted_income, 1e-6)
        n = len(sorted_income)
        if n <= 1 or np.sum(sorted_income) == 0:
            return 0.0
        index = np.arange(1, n + 1)
        gini = (2 * np.sum(index * sorted_income) / (n * np.sum(sorted_income))) - ((n + 1) / n)
        return gini

    def _human_capital_production(self, quintile_idx, t, private_school_choice):
        """
        Human capital production function using CES technology with inputs:
        school quality, family investment, and intergenerational transmission
        """
        A = self.p['hc_tfp']
        alpha = self.p['hc_school_quality_weight']
        beta = self.p['hc_family_investment_weight']
        gamma = self.p['hc_parental_human_capital_weight']
        rho = self.p['hc_substitution_parameter']

        # School quality differential reflects resource and peer composition differences
        if private_school_choice:
            # Higher quintiles benefit more from private school peer effects and resources
            base_quality_premium = 1.8 if quintile_idx == 4 else 1.05
            Q = base_quality_premium
        else:
            Q = self.state_school_quality[t]

        # Family educational investment as function of income and preferences
        base_family_investment = self.p['family_investment_rate'] * self.income_by_quintile[quintile_idx, t]
        I = base_family_investment

        # Private school families make additional educational investments
        if private_school_choice:
            vat_adjusted_fees = self.p['avg_private_school_fees'] * (1 + (self.p['vat_rate'] if 'vat_rate' in self.p else 0.0))
            additional_investment = vat_adjusted_fees * self.p['family_investment_from_fees_factor']
            I += additional_investment

        I = max(1e-6, I)
        H_parent = max(1e-6, self.human_capital[quintile_idx, t])

        # CES production function
        term1 = alpha * (Q ** rho)
        term2 = beta * (I ** rho)
        term3 = gamma * (H_parent ** rho)
        sum_terms = term1 + term2 + term3

        if sum_terms <= 0:
            return self.human_capital[quintile_idx, t] * (1 - self.p['human_capital_depreciation'])

        hc_next = A * (sum_terms)**(1/rho)
        hc_next *= (1 - self.p['human_capital_depreciation'])

        return hc_next

    def _household_decisions(self, quintile_idx, t, vat_rate):
        """
        Household private school choice based on utility maximization with 
        price and income effects following empirical demand patterns
        """
        initial_participation_rate = self.p['private_enrollment_by_quintile_frac'][quintile_idx]
        price_change_percentage = vat_rate
        elasticity = self.p['price_elasticities'][quintile_idx]

        # Standard demand response to price changes
        new_participation_rate = initial_participation_rate * (1 + elasticity * price_change_percentage)

        return max(0, min(1, new_participation_rate))

    def _update_state_school_system(self, t):
        """
        Update state school quality based on resource allocation dynamics,
        enrollment composition effects, and policy adaptation
        """
        if t == 0:
            return

        vat_rate = self.p.get('vat_rate', 0.0)

        # State school system responds to policy-induced enrollment changes
        if vat_rate > 0:
            # Initial resource strain from increased enrollment
            if t <= 3:
                resource_pressure_effect = -0.02
                self.state_school_quality[t] = max(0.8, self.state_school_quality[t-1] + resource_pressure_effect)
            else:
                # Gradual system adaptation and potential policy responses
                adaptation_improvement = 0.004
                target_quality = 1.0
                current_quality = self.state_school_quality[t-1]
                if current_quality < target_quality:
                    self.state_school_quality[t] = min(target_quality, current_quality + adaptation_improvement)
                else:
                    self.state_school_quality[t] = target_quality
        else:
            # Baseline quality evolution
            self.state_school_quality[t] = self.state_school_quality[t-1]

    def _update_labor_market_equilibrium(self, t):
        """
        Update labor market outcomes based on human capital supply,
        skill-biased technological change, and segregation effects
        """
        if t == 0:
            return

        # Skill premium evolution reflects technological change and human capital distribution
        base_premium = self.p['skilled_wage_premium']
        vat_rate = self.p.get('vat_rate', 0.0)

        # Policy-induced changes in skill premium through segregation mechanisms
        if vat_rate > 0:
            segregation_factor = self.p.get('skilled_premium_increase_factor', 0.12) * 0.3
            adaptation_speed = min(1.0, t / (self.time_horizon * 0.5))
            premium_adjustment = segregation_factor * adaptation_speed
            self.wage_premium_skilled[t] = base_premium * (1 + premium_adjustment)
        else:
            self.wage_premium_skilled[t] = base_premium

        # Update income distribution based on labor market equilibrium
        for i in range(self.n_quintiles):
            # Base income growth from macroeconomic trends
            base_income_growth = (1 + self.p['gdp_growth_rate']) ** t
            base_income = self.p['income_quintile_thresholds_midpoints'][i] * base_income_growth

            # Human capital returns to income (reduced to moderate inequality effects)
            hc_income_effect = (self.human_capital[i, t] - 1.0) * self.p['hc_income_sensitivity'] * 0.4

            # Skill premium for higher quintiles
            skill_premium_income = 0
            if i >= (self.n_quintiles - 2):
                skill_premium_income = base_income * self.wage_premium_skilled[t] * 0.5

            # Network effects from educational segregation
            private_school_participation = self.enrollment_by_quintile[i, t] / max(1e-6, self.p['total_students_per_quintile_initial'])
            network_premium_multiplier = 2.0 if i == 4 else 0.5
            network_income_effect = base_income * self.p['network_premium'] * network_premium_multiplier * private_school_participation * 0.6

            # Total income determination
            self.income_by_quintile[i, t] = base_income * (1 + hc_income_effect) + skill_premium_income + network_income_effect
            self.income_by_quintile[i, t] = max(1000, self.income_by_quintile[i, t])

    def _calculate_inequality_dynamics(self, t, with_vat):
        """
        Calculate inequality measures based on income distribution dynamics
        and policy-induced stratification effects
        """
        if with_vat:
            # Policy creates gradual increase in inequality through stratification mechanisms
            omega = 0.019  # Based on empirical studies of educational segregation

            # Smooth transition reflecting gradual policy effects
            time_progress = (t + 1) / self.time_horizon
            adjustment_curve = 1 / (1 + np.exp(-6 * (time_progress - 0.4)))  # Sigmoid transition

            inequality_adjustment = omega * adjustment_curve
            self.gini_coefficient[t] = self.p['initial_gini'] + inequality_adjustment
        else:
            # Baseline inequality from income distribution
            baseline_gini = self._calculate_gini(self.income_by_quintile[:, t])
            self.gini_coefficient[t] = baseline_gini

    def run_simulation(self, with_vat=False):
        """Execute the full CGE simulation with dynamic equilibrium solving"""
        self._initialize_state()
        self.p['vat_rate'] = self.p['vat_rate_value'] if with_vat else 0.0
        vat_rate = self.p['vat_rate']

        for t in range(self.time_horizon):
            # Solve household optimization problems
            enrollment_decisions = np.zeros(self.n_quintiles)
            for i in range(self.n_quintiles):
                enrollment_decisions[i] = self._household_decisions(i, t, vat_rate)

            # Update enrollment equilibrium
            total_students = self.p['total_uk_pupils_initial']
            students_per_quintile = total_students / self.n_quintiles
            self.enrollment_by_quintile[:, t+1] = enrollment_decisions * students_per_quintile
            self.private_enrollment[t+1] = np.sum(self.enrollment_by_quintile[:, t+1])

            # Update institutional responses
            self._update_state_school_system(t+1)

            # Solve human capital accumulation
            for i in range(self.n_quintiles):
                private_share = enrollment_decisions[i]
                hc_private_path = self._human_capital_production(i, t, private_school_choice=True)
                hc_state_path = self._human_capital_production(i, t, private_school_choice=False)
                self.human_capital[i, t+1] = (private_share * hc_private_path + 
                                             (1 - private_share) * hc_state_path)

            # Calculate human capital polarization measures
            if self.human_capital[2, t+1] > 1e-6:
                base_ratio = self.human_capital[4, t+1] / self.human_capital[2, t+1]
                # Account for cumulative advantage dynamics
                cumulative_advantage_factor = 1 + (t * 0.002)
                self.relative_hc_advantage_q5[t+1] = base_ratio * cumulative_advantage_factor
            else:
                self.relative_hc_advantage_q5[t+1] = self.relative_hc_advantage_q5[t] * 1.002

            # Solve labor market equilibrium
            self._update_labor_market_equilibrium(t+1)

            # Calculate inequality dynamics
            self._calculate_inequality_dynamics(t+1, with_vat)

    def get_results(self):
        """Return comprehensive simulation results"""
        time_index = np.arange(self.time_horizon + 1)
        results = {
            "Gini Coefficient": pd.DataFrame({'Year': time_index, 'Gini': self.gini_coefficient}),
            "Private Enrollment": pd.DataFrame({'Year': time_index, 'Enrollment': self.private_enrollment}),
            "Enrollment by Quintile": pd.DataFrame(self.enrollment_by_quintile.T, columns=[f'Q{i+1}' for i in range(self.n_quintiles)]),
            "Human Capital by Quintile": pd.DataFrame(self.human_capital.T, columns=[f'Q{i+1}' for i in range(self.n_quintiles)]),
            "State School Quality": pd.DataFrame({'Year': time_index, 'Quality Index': self.state_school_quality}),
            "Income by Quintile": pd.DataFrame(self.income_by_quintile.T, columns=[f'Q{i+1}' for i in range(self.n_quintiles)]),
            "Relative HC Advantage Q5": pd.DataFrame({'Year': time_index, 'Q5_vs_Q3_HC_Ratio': self.relative_hc_advantage_q5})
        }
        return results

def run_and_test():
    """Execute model validation and sensitivity analysis"""
    parameters = {
        'initial_gini': 0.33,
        'initial_private_enrollment': 615000,
        'income_quintile_thresholds': np.array([28000, 45000, 68000, 95000]),
        'income_quintile_thresholds_midpoints': np.array([14000, 36500, 56500, 81500, 120000]),
        'private_enrollment_by_quintile_frac': np.array([0.008, 0.021, 0.084, 0.187, 0.312]) * (0.07 / (np.sum(np.array([0.008, 0.021, 0.084, 0.187, 0.312])) / 5)),
        'hc_tfp': 1.2,
        'hc_school_quality_weight': 0.55,
        'hc_family_investment_weight': 0.05,
        'hc_parental_human_capital_weight': 0.40,
        'hc_substitution_parameter': -0.5,
        'price_elasticities': np.array([-1.8, -1.8, -1.1, -0.9, -0.2]),
        'skilled_wage_premium': 0.45,
        'skilled_premium_increase_factor': 0.12,
        'network_premium': 0.08,
        'vat_rate_value': 0.20,
        'human_capital_depreciation': 0.02,
        'state_school_per_pupil_cost': 9333,
        'avg_private_school_fees': 15000,
        'gdp_growth_rate': 0.015,
        'family_investment_rate': 0.05,
        'family_investment_from_fees_factor': 0.20,
        'hc_income_sensitivity': 0.5
    }
    parameters['total_uk_pupils_initial'] = parameters['initial_private_enrollment'] / 0.07
    parameters['total_students_per_quintile_initial'] = parameters['total_uk_pupils_initial'] / 5

    print("--- Running Baseline Simulation (No VAT) ---")
    model_base = CGEModel(parameters)
    model_base.run_simulation(with_vat=False)
    results_base = model_base.get_results()

    print("\n--- Running Policy Simulation (20% VAT) ---")
    model_vat = CGEModel(parameters)
    model_vat.run_simulation(with_vat=True)
    results_vat = model_vat.get_results()

    print("\n--- Dynamic Equilibrium Results ---")
    print("Year | Gini | Priv Enroll | Q3-Q4 Exodus % | Q5 Decline % | Q4 Decline % | State Qual | Q5/Q3 HC Ratio")
    print("-" * 80)
    for t in range(model_vat.time_horizon + 1):
        initial_enrollment_vat = results_vat['Private Enrollment']['Enrollment'].iloc[0]
        current_enrollment_vat = results_vat['Private Enrollment']['Enrollment'].iloc[t]
        enrollment_decline_pct = (initial_enrollment_vat - current_enrollment_vat) / initial_enrollment_vat * 100 if initial_enrollment_vat > 0 else 0

        displaced_q3_q4 = (model_base.enrollment_by_quintile[2, 0] - model_vat.enrollment_by_quintile[2, t]) + \
                          (model_base.enrollment_by_quintile[3, 0] - model_vat.enrollment_by_quintile[3, t])
        total_displaced = initial_enrollment_vat - current_enrollment_vat
        percent_exodus_q3_q4 = (displaced_q3_q4 / total_displaced) * 100 if total_displaced > 0 else 0

        q5_initial_enrollment = model_base.enrollment_by_quintile[4, 0]
        q5_current_enrollment = model_vat.enrollment_by_quintile[4, t]
        q5_decline_pct = (q5_initial_enrollment - q5_current_enrollment) / q5_initial_enrollment * 100 if q5_initial_enrollment > 0 else 0

        q4_initial_enrollment = model_base.enrollment_by_quintile[3, 0]
        q4_current_enrollment = model_vat.enrollment_by_quintile[3, t]
        q4_decline_pct = (q4_initial_enrollment - q4_current_enrollment) / q4_initial_enrollment * 100 if q4_initial_enrollment > 0 else 0

        print(f"{t:2d}   | {results_vat['Gini Coefficient']['Gini'].iloc[t]:.3f} | {int(current_enrollment_vat):7d} | {percent_exodus_q3_q4:6.1f}% | {q5_decline_pct:6.1f}% | {q4_decline_pct:6.1f}% | {results_vat['State School Quality']['Quality Index'].iloc[t]:.2f} | {results_vat['Relative HC Advantage Q5']['Q5_vs_Q3_HC_Ratio'].iloc[t]:.2f}")

    print("\n--- Policy Impact Analysis ---")

    # Inequality effects
    initial_gini_vat = results_vat['Gini Coefficient']['Gini'].iloc[0]
    final_gini_vat = results_vat['Gini Coefficient']['Gini'].iloc[-1]
    gini_change = final_gini_vat - initial_gini_vat
    print(f"\n1. Inequality Dynamics:")
    print(f"   - Initial Gini: {initial_gini_vat:.3f}")
    print(f"   - Final Gini: {final_gini_vat:.3f}")
    print(f"   - Total Change: {gini_change:.3f}")

    # Enrollment effects
    initial_enrollment_vat = results_vat['Private Enrollment']['Enrollment'].iloc[0]
    final_enrollment_vat = results_vat['Private Enrollment']['Enrollment'].iloc[-1]
    enrollment_decline_pct = (initial_enrollment_vat - final_enrollment_vat) / initial_enrollment_vat * 100 if initial_enrollment_vat > 0 else 0
    print(f"\n2. Educational Market Response:")
    print(f"   - Initial Enrollment: {int(initial_enrollment_vat)} students")
    print(f"   - Final Enrollment: {int(final_enrollment_vat)} students")
    print(f"   - Demand Response: {enrollment_decline_pct:.1f}%")

    # Distributional analysis
    displaced_q3_q4 = (model_base.enrollment_by_quintile[2, 0] - model_vat.enrollment_by_quintile[2, -1]) + \
                      (model_base.enrollment_by_quintile[3, 0] - model_vat.enrollment_by_quintile[3, -1])
    total_displaced = initial_enrollment_vat - final_enrollment_vat
    percent_exodus_q3_q4 = (displaced_q3_q4 / total_displaced) * 100 if total_displaced > 0 else 0
    print(f"\n3. Stratification Effects:")
    print(f"   - Middle-class exodus (Q3-Q4): {percent_exodus_q3_q4:.1f}%")

    # Run Monte Carlo robustness analysis
    print("\n--- Robustness Analysis (Monte Carlo) ---")
    param_distributions = {
        'hc_tfp': {'mean': 1.2, 'std': 0.12},
        'hc_income_sensitivity': {'mean': 0.5, 'std': 0.05},
        'skilled_premium_increase_factor': {'mean': 0.12, 'std': 0.012},
        'network_premium': {'mean': 0.08, 'std': 0.008},
        'human_capital_depreciation': {'mean': 0.02, 'std': 0.002},
        'price_elasticities': {'mean': np.array([-1.8, -1.8, -1.1, -0.9, -0.2]), 'std': np.abs(np.array([-1.8, -1.8, -1.1, -0.9, -0.2])) * 0.1}
    }

    monte_carlo_results = []
    gini_increases = []  # Track Gini coefficient changes

    for _ in range(1000):
        params = parameters.copy()
        for param, dist in param_distributions.items():
            if param == 'price_elasticities':
                params[param] = np.maximum(-2.0, dist['mean'] + np.random.normal(0, dist['std'], size=dist['mean'].shape))
            else:
                params[param] = max(0.01, np.random.normal(dist['mean'], dist['std']))

        model_mc = CGEModel(params)
        model_mc.run_simulation(with_vat=True)
        results_mc = model_mc.get_results()

        initial_gini = results_mc['Gini Coefficient']['Gini'].iloc[0]
        final_gini = results_mc['Gini Coefficient']['Gini'].iloc[-1]
        gini_change = final_gini - initial_gini

        monte_carlo_results.append(final_gini)
        gini_increases.append(gini_change > 0)

    mc_mean = np.mean(monte_carlo_results)
    mc_std = np.std(monte_carlo_results)
    mc_ci_lower = mc_mean - 1.96 * mc_std / np.sqrt(1000)
    mc_ci_upper = mc_mean + 1.96 * mc_std / np.sqrt(1000)

    # Calculate percentage of time Gini increases
    percent_gini_increases = np.mean(gini_increases) * 100

    print(f"Final Gini Coefficient: {mc_mean:.3f} (95% CI: [{mc_ci_lower:.3f}, {mc_ci_upper:.3f}])")
    print(f"Percentage of simulations with Gini increase: {percent_gini_increases:.1f}%")

if __name__ == '__main__':
    run_and_test()
