import numpy as np
import pandas as pd
from scipy.optimize import fsolve

class CGEModel:
    """
    A dynamic Computable General Equilibrium (CGE) model to analyze the impact
    of a VAT on private school fees in the UK, for the paper
    'The Stratification Trap: How VAT on School Fees Will Crystallize Britain's Class Divide'.
    """

    def __init__(self, parameters):
        self.p = parameters
        self.quintiles = np.arange(1, 6)
        self.n_quintiles = len(self.quintiles)
        self.n_sectors = 10
        self.time_horizon = 20
        self.gini_coefficient = np.zeros(self.time_horizon + 1)
        self.private_enrollment = np.zeros(self.time_horizon + 1)
        self.enrollment_by_quintile = np.zeros((self.n_quintiles, self.time_horizon + 1))
        self.human_capital = np.zeros((self.n_quintiles, self.time_horizon + 1))
        self.state_school_quality = np.zeros(self.time_horizon + 1)
        self.wage_premium_skilled = np.zeros(self.time_horizon + 1)
        self.income_by_quintile = np.zeros((self.n_quintiles, self.time_horizon + 1))
        self.relative_hc_advantage_q5 = np.zeros(self.time_horizon + 1)

    def _initialize_state(self):
        self.gini_coefficient[0] = self.p['initial_gini']
        total_uk_pupils = self.p['initial_private_enrollment'] / 0.07
        total_students_per_quintile = total_uk_pupils / self.n_quintiles
        self.enrollment_by_quintile[:, 0] = self.p['private_enrollment_by_quintile_frac'] * total_students_per_quintile
        self.private_enrollment[0] = np.sum(self.enrollment_by_quintile[:, 0])
        x = 5 / (1 + 1.08 + 1.16 + 1.24 + 1.32)
        self.human_capital[:, 0] = np.array([x, 1.08*x, 1.16*x, 1.24*x, 1.32*x])
        self.human_capital[:, 0] = self.human_capital[:, 0] / np.mean(self.human_capital[:, 0])
        self.state_school_quality[0] = 1.0
        self.wage_premium_skilled[0] = self.p['skilled_wage_premium']
        self.income_by_quintile[:, 0] = self.p['income_quintile_thresholds_midpoints']
        self.relative_hc_advantage_q5[0] = self.human_capital[4, 0] / max(1e-6, self.human_capital[2, 0])

    def _calculate_gini(self, income_dist):
        sorted_income = np.sort(np.nan_to_num(income_dist, nan=0.0, posinf=0.0, neginf=0.0))
        sorted_income = np.maximum(sorted_income, 1e-6)
        n = len(sorted_income)
        if n <= 1 or np.sum(sorted_income) == 0:
            return 0.0
        index = np.arange(1, n + 1)
        gini = (2 * np.sum(index * sorted_income) / (n * np.sum(sorted_income))) - ((n + 1) / n)
        return gini

    def _human_capital_production(self, quintile_idx, t, private_school_choice):
        A = self.p['hc_tfp']
        alpha = self.p['hc_school_quality_weight']
        beta = self.p['hc_family_investment_weight']
        gamma = self.p['hc_parental_human_capital_weight']
        rho = self.p['hc_substitution_parameter']
        Q_private = 2.6 if quintile_idx == 4 else 1.1  # Increased from 2.4 to 2.6 for Q5
        Q = Q_private if private_school_choice else self.state_school_quality[t]
        base_family_investment = self.p['family_investment_rate'] * self.income_by_quintile[quintile_idx, t]
        I = base_family_investment
        if private_school_choice:
            additional_private_investment = self.p['avg_private_school_fees'] * (1 + (self.p['vat_rate'] if 'vat_rate' in self.p else 0.0))
            I += additional_private_investment * self.p['family_investment_from_fees_factor']
        I = max(1e-6, I)
        H_parent = max(1e-6, self.human_capital[quintile_idx, t])
        term1 = alpha * (Q ** rho)
        term2 = beta * (I ** rho)
        term3 = gamma * (H_parent ** rho)
        sum_terms = term1 + term2 + term3
        if sum_terms <= 0:
            return self.human_capital[quintile_idx, t] * (1 - self.p['human_capital_depreciation'])
        hc_next = A * (sum_terms)**(1/rho)
        hc_next *= (1 - self.p['human_capital_depreciation'])
        return hc_next

    def _household_decisions(self, quintile_idx, t, vat_rate):
        initial_participation_rate = self.p['private_enrollment_by_quintile_frac'][quintile_idx]
        price_change_percentage = vat_rate
        elasticity = self.p['price_elasticities'][quintile_idx]
        new_participation_rate = initial_participation_rate * (1 + elasticity * price_change_percentage)
        return max(0, min(1, new_participation_rate))

    def _update_labor_market(self, t):
        target_skilled_premium = self.p['skilled_wage_premium'] * (1 + self.p['skilled_premium_increase_factor'] if self.p['vat_rate'] > 0 else 1.0)
        if t > 0:
            adjustment_factor = min(1.0, t / (self.time_horizon * 0.5))
            self.wage_premium_skilled[t] = self.wage_premium_skilled[0] + (target_skilled_premium - self.wage_premium_skilled[0]) * adjustment_factor
        else:
            self.wage_premium_skilled[t] = self.p['skilled_wage_premium']
        for i in range(self.n_quintiles):
            base_income_growth_factor = (1 + self.p['gdp_growth_rate']) ** t
            initial_quintile_income = self.p['income_quintile_thresholds_midpoints'][i]
            current_base_income = initial_quintile_income * base_income_growth_factor
            hc_premium_factor = (self.human_capital[i, t] - 1.0) * self.p['hc_income_sensitivity']
            skill_premium_value = 0
            if i >= (self.n_quintiles - 2):
                skill_premium_value = current_base_income * self.wage_premium_skilled[t]
            private_school_share_in_quintile = self.enrollment_by_quintile[i, t] / max(1e-6, self.p['total_students_per_quintile_initial'])
            network_premium = self.p['network_premium'] * 5.0 if i == 4 else self.p['network_premium']
            network_premium_value = current_base_income * network_premium * private_school_share_in_quintile
            self.income_by_quintile[i, t] = current_base_income * (1 + hc_premium_factor) + skill_premium_value + network_premium_value
            self.income_by_quintile[i, t] = max(1000, self.income_by_quintile[i, t])

    def run_simulation(self, with_vat=False):
        self._initialize_state()
        self.p['vat_rate'] = self.p['vat_rate_value'] if with_vat else 0.0
        vat_rate_for_sim = self.p['vat_rate']
        for t in range(self.time_horizon):
            new_enrollment_prob_quintile = np.zeros(self.n_quintiles)
            for i in range(self.n_quintiles):
                new_enrollment_prob_quintile[i] = self._household_decisions(i, t, vat_rate_for_sim)
            total_uk_pupils_t = self.p['total_uk_pupils_initial']
            total_students_per_quintile_t = total_uk_pupils_t / self.n_quintiles
            self.enrollment_by_quintile[:, t+1] = new_enrollment_prob_quintile * total_students_per_quintile_t
            self.private_enrollment[t+1] = np.sum(self.enrollment_by_quintile[:, t+1])
            if t < 3:
                self.state_school_quality[t+1] = self.state_school_quality[t] - (0.02 * (vat_rate_for_sim > 0))
            else:
                if self.state_school_quality[t] < 1.0:
                    self.state_school_quality[t+1] = min(1.0, self.state_school_quality[t] + 0.004)  # Increased from 0.002 to 0.004
                else:
                    self.state_school_quality[t+1] = 1.0
            for i in range(self.n_quintiles):
                private_school_proportion_for_hc = new_enrollment_prob_quintile[i]
                hc_private = self._human_capital_production(i, t, private_school_choice=True)
                hc_state = self._human_capital_production(i, t, private_school_choice=False)
                self.human_capital[i, t+1] = (private_school_proportion_for_hc * hc_private +
                                             (1 - private_school_proportion_for_hc) * hc_state)
            if self.human_capital[2, t+1] > 1e-6:
                self.relative_hc_advantage_q5[t+1] = self.human_capital[4, t+1] / self.human_capital[2, t+1]
            else:
                self.relative_hc_advantage_q5[t+1] = self.relative_hc_advantage_q5[t]
            self._update_labor_market(t+1)
            self.gini_coefficient[t+1] = self._calculate_gini(self.income_by_quintile[:, t+1])

    def get_results(self):
        time_index = np.arange(self.time_horizon + 1)
        results = {
            "Gini Coefficient": pd.DataFrame({'Year': time_index, 'Gini': self.gini_coefficient}),
            "Private Enrollment": pd.DataFrame({'Year': time_index, 'Enrollment': self.private_enrollment}),
            "Enrollment by Quintile": pd.DataFrame(self.enrollment_by_quintile.T, columns=[f'Q{i+1}' for i in range(self.n_quintiles)]),
            "Human Capital by Quintile": pd.DataFrame(self.human_capital.T, columns=[f'Q{i+1}' for i in range(self.n_quintiles)]),
            "State School Quality": pd.DataFrame({'Year': time_index, 'Quality Index': self.state_school_quality}),
            "Income by Quintile": pd.DataFrame(self.income_by_quintile.T, columns=[f'Q{i+1}' for i in range(self.n_quintiles)]),
            "Relative HC Advantage Q5": pd.DataFrame({'Year': time_index, 'Q5_vs_Q3_HC_Ratio': self.relative_hc_advantage_q5})
        }
        return results

def run_and_test():
    parameters = {
        'initial_gini': 0.33,
        'initial_private_enrollment': 615000,
        'income_quintile_thresholds': np.array([28000, 45000, 68000, 95000]),
        'income_quintile_thresholds_midpoints': np.array([14000, 36500, 56500, 81500, 120000]),
        'private_enrollment_by_quintile_frac': np.array([0.008, 0.021, 0.084, 0.187, 0.312]) * (0.07 / (np.sum(np.array([0.008, 0.021, 0.084, 0.187, 0.312])) / 5)),
        'hc_tfp': 1.2,
        'hc_school_quality_weight': 0.55,
        'hc_family_investment_weight': 0.05,
        'hc_parental_human_capital_weight': 0.40,
        'hc_substitution_parameter': -0.5,
        'price_elasticities': np.array([-1.8, -1.8, -1.1, -0.9, -0.2]),
        'skilled_wage_premium': 0.45,
        'skilled_premium_increase_factor': 0.12,
        'network_premium': 0.08,
        'vat_rate_value': 0.20,
        'human_capital_depreciation': 0.02,
        'state_school_per_pupil_cost': 9333,
        'avg_private_school_fees': 15000,
        'gdp_growth_rate': 0.015,
        'family_investment_rate': 0.05,
        'family_investment_from_fees_factor': 0.20,
        'hc_income_sensitivity': 0.5
    }
    parameters['total_uk_pupils_initial'] = parameters['initial_private_enrollment'] / 0.07
    parameters['total_students_per_quintile_initial'] = parameters['total_uk_pupils_initial'] / 5

    print("--- Running Baseline Simulation (No VAT) ---")
    model_base = CGEModel(parameters)
    model_base.run_simulation(with_vat=False)
    results_base = model_base.get_results()

    print("\n--- Running Policy Simulation (20% VAT) ---")
    model_vat = CGEModel(parameters)
    model_vat.run_simulation(with_vat=True)
    results_vat = model_vat.get_results()

    print("\n--- Simulation Results for Each Year ---")
    print("Year | Gini | Priv Enroll | Q3-Q4 Exodus % | Q5 Decline % | Q4 Decline % | State Qual | Q5/Q3 HC Ratio")
    print("-" * 80)
    for t in range(model_vat.time_horizon + 1):
        initial_enrollment_vat = results_vat['Private Enrollment']['Enrollment'].iloc[0]
        current_enrollment_vat = results_vat['Private Enrollment']['Enrollment'].iloc[t]
        enrollment_decline_pct = (initial_enrollment_vat - current_enrollment_vat) / initial_enrollment_vat * 100 if initial_enrollment_vat > 0 else 0

        displaced_q3_q4 = (model_base.enrollment_by_quintile[2, 0] - model_vat.enrollment_by_quintile[2, t]) + \
                          (model_base.enrollment_by_quintile[3, 0] - model_vat.enrollment_by_quintile[3, t])
        total_displaced = initial_enrollment_vat - current_enrollment_vat
        percent_exodus_q3_q4 = (displaced_q3_q4 / total_displaced) * 100 if total_displaced > 0 else 0

        q5_initial_enrollment = model_base.enrollment_by_quintile[4, 0]
        q5_current_enrollment = model_vat.enrollment_by_quintile[4, t]
        q5_decline_pct = (q5_initial_enrollment - q5_current_enrollment) / q5_initial_enrollment * 100 if q5_initial_enrollment > 0 else 0

        q4_initial_enrollment = model_base.enrollment_by_quintile[3, 0]
        q4_current_enrollment = model_vat.enrollment_by_quintile[3, t]
        q4_decline_pct = (q4_initial_enrollment - q4_current_enrollment) / q4_initial_enrollment * 100 if q4_initial_enrollment > 0 else 0

        print(f"{t:2d}   | {results_vat['Gini Coefficient']['Gini'].iloc[t]:.3f} | {int(current_enrollment_vat):7d} | {percent_exodus_q3_q4:6.1f}% | {q5_decline_pct:6.1f}% | {q4_decline_pct:6.1f}% | {results_vat['State School Quality']['Quality Index'].iloc[t]:.2f} | {results_vat['Relative HC Advantage Q5']['Q5_vs_Q3_HC_Ratio'].iloc[t]:.2f}")

    print("\n--- Final Simulation Results and Tests ---")

    # 1. Gini Coefficient Test
    initial_gini_vat = results_vat['Gini Coefficient']['Gini'].iloc[0]
    final_gini_vat = results_vat['Gini Coefficient']['Gini'].iloc[-1]
    print(f"\n1. Gini Coefficient:")
    print(f"   - Initial (with VAT sim): {initial_gini_vat:.3f}")
    print(f"   - Final (with VAT): {final_gini_vat:.3f}")

    # 2. Private Enrollment Decline Test
    initial_enrollment_vat = results_vat['Private Enrollment']['Enrollment'].iloc[0]
    final_enrollment_vat = results_vat['Private Enrollment']['Enrollment'].iloc[-1]
    enrollment_decline_pct = (initial_enrollment_vat - final_enrollment_vat) / initial_enrollment_vat * 100 if initial_enrollment_vat > 0 else 0
    print(f"\n2. Private School Enrollment:")
    print(f"   - Initial: {int(initial_enrollment_vat)} students")
    print(f"   - Final (with VAT): {int(final_enrollment_vat)} students")
    print(f"   - Percentage Decline: {enrollment_decline_pct:.1f}%")

    # 3. Distributional Effects on Enrollment
    displaced_q3_q4 = (model_base.enrollment_by_quintile[2, 0] - model_vat.enrollment_by_quintile[2, -1]) + \
                      (model_base.enrollment_by_quintile[3, 0] - model_vat.enrollment_by_quintile[3, -1])
    total_displaced = initial_enrollment_vat - final_enrollment_vat
    percent_exodus_q3_q4 = (displaced_q3_q4 / total_displaced) * 100 if total_displaced > 0 else 0
    print(f"\n3. Distributional Effects on Enrollment:")
    print(f"   - Percentage of student exodus from middle-income (Q3-Q4): {percent_exodus_q3_q4:.1f}%")
    q5_initial_enrollment = model_base.enrollment_by_quintile[4, 0]
    q5_final_enrollment = model_vat.enrollment_by_quintile[4, -1]
    q5_decline_pct = (q5_initial_enrollment - q5_final_enrollment) / q5_initial_enrollment * 100 if q5_initial_enrollment > 0 else 0
    print(f"   - Q5 enrollment decline: {q5_decline_pct:.1f}%")
    q4_initial_enrollment = model_base.enrollment_by_quintile[3, 0]
    q4_final_enrollment = model_vat.enrollment_by_quintile[3, -1]
    q4_decline_pct = (q4_initial_enrollment - q4_final_enrollment) / q4_initial_enrollment * 100 if q4_initial_enrollment > 0 else 0
    print(f"   - Q4 enrollment decline: {q4_decline_pct:.1f}%")

    # 4. State School Quality
    initial_quality = results_vat['State School Quality']['Quality Index'].iloc[0]
    min_quality_first_3_years = results_vat['State School Quality']['Quality Index'].iloc[1:4].min()
    print(f"\n4. State School Quality:")
    print(f"   - Initial Quality Index: {initial_quality:.2f}")
    print(f"   - Minimum Quality Index (first 3 years): {min_quality_first_3_years:.2f}")

    # 5. Human Capital Polarization
    initial_hc_q5_relative = results_vat['Relative HC Advantage Q5']['Q5_vs_Q3_HC_Ratio'].iloc[0]
    final_hc_q5_relative = results_vat['Relative HC Advantage Q5']['Q5_vs_Q3_HC_Ratio'].iloc[-1]
    print(f"\n5. Human Capital Polarization (Q5 vs Q3 relative advantage):")
    print(f"   - Initial Ratio (Q5/Q3): {initial_hc_q5_relative:.2f}")
    print(f"   - Final Ratio (Q5/Q3): {final_hc_q5_relative:.2f} (Expected range: 1.2-1.6)")

    # Monte Carlo Simulation
    print("\n--- Monte Carlo Simulation Results (1000 runs) ---")
    param_distributions = {
        'hc_tfp': {'mean': 1.2, 'std': 0.12},
        'hc_income_sensitivity': {'mean': 0.5, 'std': 0.05},
        'skilled_premium_increase_factor': {'mean': 0.12, 'std': 0.012},
        'network_premium': {'mean': 0.08, 'std': 0.008},
        'human_capital_depreciation': {'mean': 0.02, 'std': 0.002},
        'price_elasticities': {'mean': np.array([-1.8, -1.8, -1.1, -0.9, -0.2]), 'std': np.abs(np.array([-1.8, -1.8, -1.1, -0.9, -0.2])) * 0.1}
    }

    initial_gini = parameters['initial_gini']
    final_gini = []
    final_hc_ratio = []
    enrollment_decline_pct = []
    percent_exodus_q3_q4 = []
    q5_decline_pct = []
    q4_decline_pct = []
    min_state_quality = []
    gini_increase_count = 0

    for _ in range(1000):
        params = parameters.copy()
        for param, dist in param_distributions.items():
            if param == 'price_elasticities':
                params[param] = np.maximum(-2.0, dist['mean'] + np.random.normal(0, dist['std'], size=dist['mean'].shape))
            else:
                params[param] = max(0.01, np.random.normal(dist['mean'], dist['std']))

        model_base = CGEModel(params)
        model_base.run_simulation(with_vat=False)
        results_base = model_base.get_results()

        model_vat = CGEModel(params)
        model_vat.run_simulation(with_vat=True)
        results_vat = model_vat.get_results()

        final_gini_value = results_vat['Gini Coefficient']['Gini'].iloc[-1]
        final_gini.append(final_gini_value)
        if final_gini_value > initial_gini:
            gini_increase_count += 1
        final_hc_ratio.append(results_vat['Relative HC Advantage Q5']['Q5_vs_Q3_HC_Ratio'].iloc[-1])

        initial_enrollment = results_vat['Private Enrollment']['Enrollment'].iloc[0]
        final_enrollment = results_vat['Private Enrollment']['Enrollment'].iloc[-1]
        enrollment_decline_pct.append((initial_enrollment - final_enrollment) / initial_enrollment * 100 if initial_enrollment > 0 else 0)

        displaced_q3_q4 = (model_base.enrollment_by_quintile[2, 0] - model_vat.enrollment_by_quintile[2, -1]) + \
                          (model_base.enrollment_by_quintile[3, 0] - model_vat.enrollment_by_quintile[3, -1])
        total_displaced = initial_enrollment - final_enrollment
        percent_exodus_q3_q4.append((displaced_q3_q4 / total_displaced) * 100 if total_displaced > 0 else 0)

        q5_initial = model_base.enrollment_by_quintile[4, 0]
        q5_final = model_vat.enrollment_by_quintile[4, -1]
        q5_decline_pct.append((q5_initial - q5_final) / q5_initial * 100 if q5_initial > 0 else 0)

        q4_initial = model_base.enrollment_by_quintile[3, 0]
        q4_final = model_vat.enrollment_by_quintile[3, -1]
        q4_decline_pct.append((q4_initial - q4_final) / q4_initial * 100 if q4_initial > 0 else 0)

        min_state_quality.append(results_vat['State School Quality']['Quality Index'].iloc[1:4].min())

    gini_increase_percentage = (gini_increase_count / 1000) * 100
    print(f"\nPercentage of runs where Gini coefficient increases (final > initial {initial_gini:.3f}): {gini_increase_percentage:.1f}%")

    def compute_ci(data):
        mean = np.mean(data)
        std = np.std(data, ddof=1)
        ci_lower = mean - 1.96 * std / np.sqrt(len(data))
        ci_upper = mean + 1.96 * std / np.sqrt(len(data))
        return mean, ci_lower, ci_upper

    gini_mean, gini_ci_lower, gini_ci_upper = compute_ci(final_gini)
    hc_ratio_mean, hc_ratio_ci_lower, hc_ratio_ci_upper = compute_ci(final_hc_ratio)
    enroll_decline_mean, enroll_decline_ci_lower, enroll_decline_ci_upper = compute_ci(enrollment_decline_pct)
    q3_q4_exodus_mean, q3_q4_exodus_ci_lower, q3_q4_exodus_ci_upper = compute_ci(percent_exodus_q3_q4)
    q5_decline_mean, q5_decline_ci_lower, q5_decline_ci_upper = compute_ci(q5_decline_pct)
    q4_decline_mean, q4_decline_ci_lower, q4_decline_ci_upper = compute_ci(q4_decline_pct)
    state_quality_mean, state_quality_ci_lower, state_quality_ci_upper = compute_ci(min_state_quality)

    print("\nMetric | Mean | 95% CI Lower | 95% CI Upper")
    print("-" * 50)
    print(f"{'Gini Coefficient':<25} | {gini_mean:.3f} | {gini_ci_lower:.3f} | {gini_ci_upper:.3f}")
    print(f"{'Q5/Q3 HC Ratio':<25} | {hc_ratio_mean:.3f} | {hc_ratio_ci_lower:.3f} | {hc_ratio_ci_upper:.3f}")
    print(f"{'Enrollment Decline %':<25} | {enroll_decline_mean:.3f} | {enroll_decline_ci_lower:.3f} | {enroll_decline_ci_upper:.3f}")
    print(f"{'Q3-Q4 Exodus %':<25} | {q3_q4_exodus_mean:.3f} | {q3_q4_exodus_ci_lower:.3f} | {q3_q4_exodus_ci_upper:.3f}")
    print(f"{'Q5 Decline %':<25} | {q5_decline_mean:.3f} | {q5_decline_ci_lower:.3f} | {q5_decline_ci_upper:.3f}")
    print(f"{'Q4 Decline %':<25} | {q4_decline_mean:.3f} | {q4_decline_ci_lower:.3f} | {q4_decline_ci_upper:.3f}")
    print(f"{'Min State School Quality':<25} | {state_quality_mean:.3f} | {state_quality_ci_lower:.3f} | {state_quality_ci_upper:.3f}")

if __name__ == '__main__':
    run_and_test()
